name: Team Management Workflow

on:
  issues:
    types: [opened]

jobs:
  process-team-request:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'team-management')
    permissions:
      contents: write
      issues: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
        
      # Add GitHub App authentication using official GitHub action
      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Install @github/issue-parser
        run: npm install @github/issue-parser
          
      - name: Parse issue body with issue-parser
        id: parse
        uses: actions/github-script@v6
        with:
          script: |
            const { parseIssue } = require('@github/issue-parser');
            
            const issueBody = context.payload.issue.body;
            console.log("Raw issue body:", issueBody);
            
            // Parse the issue body using @github/issue-parser
            const parsedIssue = parseIssue(issueBody);
            console.log("Parsed issue:", JSON.stringify(parsedIssue, null, 2));
            
            // Extract the fields we need
            const applicationId = parsedIssue['Application ID'] || 'Unknown';
            const applicationTier = parsedIssue['Application Tier'] || 'Unknown';
            const teamName = parsedIssue['Team Name'] || 'Unknown';
            const teamMembers = (parsedIssue['Team Members'] || '').split('\n').filter(member => member.trim().length > 0);
            const subTeam = parsedIssue['Sub-Team Name (optional)'] || '';
            const subTeamMembers = (parsedIssue['Sub-Team Members (optional)'] || '').split('\n').filter(member => member.trim().length > 0);
            const permissionLevel = parsedIssue['Team Permission Level'] || 'read';
            const repoAssets = (parsedIssue['Repository Assets'] || '').split('\n').filter(repo => repo.trim().length > 0);
            
            // Format as JSON arrays for output
            const teamMembersJson = JSON.stringify(teamMembers);
            const subTeamMembersJson = JSON.stringify(subTeamMembers);
            const repoAssetsJson = JSON.stringify(repoAssets);
            
            // Set outputs
            core.setOutput('APPLICATION_ID', applicationId);
            core.setOutput('APPLICATION_TIER', applicationTier);
            core.setOutput('TEAM_NAME', teamName);
            core.setOutput('TEAM_MEMBERS', teamMembersJson);
            core.setOutput('SUB_TEAM', subTeam);
            core.setOutput('SUB_TEAM_MEMBERS', subTeamMembersJson);
            core.setOutput('PERMISSION_LEVEL', permissionLevel);
            core.setOutput('REPO_ASSETS', repoAssetsJson);
            
            // For debugging
            console.log("Parsed fields:");
            console.log("Application ID:", applicationId);
            console.log("Application Tier:", applicationTier);
            console.log("Team Name:", teamName);
            console.log("Team Members:", teamMembersJson);
            console.log("Sub-Team:", subTeam);
            console.log("Sub-Team Members:", subTeamMembersJson);
            console.log("Permission Level:", permissionLevel);
            console.log("Repository Assets:", repoAssetsJson);
      
      - name: Create team data JSON
        id: create-json
        run: |
          # Create JSON with team information
          cat << EOF > team_data.json
          {
            "application_id": "${{ steps.parse.outputs.APPLICATION_ID }}",
            "application_tier": "${{ steps.parse.outputs.APPLICATION_TIER }}",
            "team_name": "${{ steps.parse.outputs.TEAM_NAME }}",
            "team_members": ${{ steps.parse.outputs.TEAM_MEMBERS }},
            "sub_team": "${{ steps.parse.outputs.SUB_TEAM }}",
            "sub_team_members": ${{ steps.parse.outputs.SUB_TEAM_MEMBERS }},
            "permission_level": "${{ steps.parse.outputs.PERMISSION_LEVEL }}",
            "repo_assets": ${{ steps.parse.outputs.REPO_ASSETS }},
            "created_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "issue_number": "${{ github.event.issue.number }}"
          }
          EOF
          
          # Create filename using application ID and timestamp
          TIMESTAMP=$(date +%s)
          FILENAME="${{ steps.parse.outputs.APPLICATION_ID }}_${TIMESTAMP}.json"
          echo "FILENAME=${FILENAME}" >> $GITHUB_OUTPUT
          
          # Ensure teamDB directory exists
          mkdir -p teamDB
          cp team_data.json "teamDB/${FILENAME}"
          
          # View contents for verification
          cat "teamDB/${FILENAME}"
      
      - name: Commit team data to repository
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          # Configure git with token authentication
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
          # Set up authentication using the token
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git
          
          # Ensure the teamDB directory exists
          mkdir -p teamDB
          
          # Check if there are changes to commit
          if [[ $(git status --porcelain teamDB/) ]]; then
            echo "Changes detected in teamDB folder, committing changes..."
            git add teamDB/
            git commit -m "Add team data for ${{ steps.parse.outputs.APPLICATION_ID }}"
            
            # Push with error handling
            echo "Pushing changes to repository..."
            if git push; then
              echo "Successfully pushed team data to repository"
            else
              echo "Failed to push changes. Pulling latest changes and trying again..."
              git pull --rebase
              if git push; then
                echo "Successfully pushed team data after rebase"
              else
                echo "Failed to push team data after rebase"
                exit 1
              fi
            fi
          else
            echo "No changes detected in teamDB folder"
          fi
      
      # Add debugging step to check token
      - name: Debug token
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          echo "Token generated successfully"
          echo "Testing org access..."
          # Test if the token has organization access (without showing sensitive info)
          curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $GH_TOKEN" https://api.github.com/orgs/KasdalOrg
      
      - name: Create and manage GitHub teams
        id: manage-teams
        uses: actions/github-script@v6
        with:
          # Use the GitHub App token
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const appId = '${{ steps.parse.outputs.APPLICATION_ID }}';
            const teamName = '${{ steps.parse.outputs.TEAM_NAME }}';
            const teamMembers = JSON.parse('${{ steps.parse.outputs.TEAM_MEMBERS }}');
            const subTeamName = '${{ steps.parse.outputs.SUB_TEAM }}';
            const subTeamMembers = JSON.parse('${{ steps.parse.outputs.SUB_TEAM_MEMBERS }}');
            const permissionLevel = '${{ steps.parse.outputs.PERMISSION_LEVEL }}';
            const repoAssets = JSON.parse('${{ steps.parse.outputs.REPO_ASSETS }}');
            
            const orgName = 'KasdalOrg'; // Your organization name
            const parentTeamSlug = 'all-projects'; // Parent team for all teams
            
            // Debug information
            console.log(`Organization: ${orgName}`);
            console.log(`Team Name: ${teamName}`);
            console.log(`Team Members: ${JSON.stringify(teamMembers)}`);
            console.log(`Repositories: ${JSON.stringify(repoAssets)}`);
            console.log(`Parent Team Slug: ${parentTeamSlug}`);
            
            // Function to get a team by slug
            async function getTeamBySlug(slug) {
              try {
                console.log(`Looking for team by slug: ${slug}`);
                // Use the getByName endpoint (which actually uses slug)
                const response = await github.rest.teams.getByName({
                  org: orgName,
                  team_slug: slug
                });
                
                if (response.status === 200) {
                  console.log(`Found team with slug: ${slug}, id: ${response.data.id}`);
                  return response.data;
                }
              } catch (error) {
                if (error.status === 404) {
                  console.log(`Team with slug '${slug}' not found.`);
                } else {
                  console.log(`Error getting team by slug ${slug}: ${error.message}`);
                }
                return null;
              }
            }
            
            // Function to create a team
            async function createTeam(name, description) {
              try {
                console.log(`Creating team ${name}...`);
                const response = await github.rest.teams.create({
                  org: orgName,
                  name: name,
                  description: description,
                  privacy: 'closed'
                });
                console.log(`Team created successfully: ${name} with slug: ${response.data.slug}`);
                return response.data;
              } catch (error) {
                console.log(`Error creating team ${name}: ${error.message}`);
                // Check if team already exists
                if (error.status === 422) {
                  console.log(`Team ${name} might already exist, attempting to fetch by slug...`);
                  // Convert team name to slug format
                  const possibleSlug = name.toLowerCase().replace(/\s+/g, '-');
                  const existingTeam = await getTeamBySlug(possibleSlug);
                  if (existingTeam) {
                    return existingTeam;
                  }
                }
                throw error;
              }
            }
            
            // Function to add members to a team
            async function addTeamMembers(teamSlug, members) {
              for (const username of members) {
                try {
                  console.log(`Adding ${username} to team ${teamSlug}...`);
                  await github.rest.teams.addOrUpdateMembershipForUserInOrg({
                    org: orgName,
                    team_slug: teamSlug,
                    username: username,
                    role: 'member'
                  });
                  console.log(`Successfully added ${username} to team ${teamSlug}`);
                } catch (error) {
                  console.log(`Error adding ${username} to team: ${error.message}`);
                }
              }
            }
            
            // Function to set repository permissions for a team
            async function setRepoPermissions(teamSlug, repoName, permission) {
              try {
                let [owner, repo] = repoName.includes('/') ? repoName.split('/') : [orgName, repoName];
                console.log(`Setting ${permission} permission for team ${teamSlug} on repo ${owner}/${repo}...`);
                
                try {
                  // First check if repo exists and is accessible
                  await github.rest.repos.get({
                    owner: owner,
                    repo: repo
                  });
                  
                  // Then add team to repo with permissions
                  await github.rest.teams.addOrUpdateRepoPermissionsInOrg({
                    org: orgName,
                    team_slug: teamSlug,
                    owner: owner,
                    repo: repo,
                    permission: permission
                  });
                  console.log(`Successfully set ${permission} permission for team ${teamSlug} on repo ${owner}/${repo}`);
                } catch (repoError) {
                  console.log(`Error accessing repository ${owner}/${repo}: ${repoError.message}`);
                }
              } catch (error) {
                console.log(`Error setting repo permissions: ${error.message}`);
                console.log(error);
              }
            }
            
            // Function to set parent team
            async function setParentTeam(childTeamSlug, parentTeamId) {
              try {
                console.log(`Setting parent team (ID: ${parentTeamId}) for team ${childTeamSlug}...`);
                await github.rest.teams.updateInOrg({
                  org: orgName,
                  team_slug: childTeamSlug,
                  parent_team_id: parentTeamId
                });
                console.log(`Successfully set parent-child relationship`);
                return true;
              } catch (error) {
                console.log(`Error setting parent team: ${error.message}`);
                return false;
              }
            }
            
            // Main execution
            try {
              // Find the all-projects parent team using slug
              console.log(`Looking for parent team by slug: ${parentTeamSlug}`);
              const parentTeam = await getTeamBySlug(parentTeamSlug);
              
              let parentTeamId = null;
              if (!parentTeam) {
                console.log(`Parent team with slug '${parentTeamSlug}' not found. Creating parent team.`);
                try {
                  // Create the parent team if it doesn't exist
                  const createdParentTeam = await createTeam('All Projects', 'Parent team for all projects');
                  parentTeamId = createdParentTeam.id;
                  console.log(`Created parent team 'All Projects' with ID: ${parentTeamId}`);
                } catch (createError) {
                  console.log(`Failed to create parent team: ${createError.message}`);
                }
              } else {
                console.log(`Found parent team: ${parentTeam.name} (ID: ${parentTeam.id})`);
                parentTeamId = parentTeam.id;
              }
              
              // Create main team
              const teamDescription = `Team for ${appId} (${teamName})`;
              console.log(`Attempting to create/find team: ${teamName}`);
              const team = await createTeam(teamName, teamDescription);
              
              // Add members to main team
              console.log(`Adding members to team ${teamName}`);
              await addTeamMembers(team.slug, teamMembers);
              
              // Set this team as a child of all-projects
              if (parentTeamId) {
                console.log(`Setting ${team.slug} as child of team ID: ${parentTeamId}`);
                await setParentTeam(team.slug, parentTeamId);
              }
              
              // Create sub-team if provided
              let subTeam = null;
              if (subTeamName && subTeamName.trim() !== '') {
                const subTeamDescription = `Sub-team for ${appId} (${subTeamName})`;
                console.log(`Attempting to create/find sub-team: ${subTeamName}`);
                subTeam = await createTeam(subTeamName, subTeamDescription);
                
                // Add members to sub-team
                if (subTeamMembers && subTeamMembers.length > 0) {
                  console.log(`Adding members to sub-team ${subTeamName}`);
                  await addTeamMembers(subTeam.slug, subTeamMembers);
                }
                
                // Set main team as parent of sub-team
                if (team.id) {
                  console.log(`Setting ${team.name} as parent of ${subTeam.name}`);
                  await setParentTeam(subTeam.slug, team.id);
                }
              }
              
              // Set repository permissions for team
              console.log(`Setting repository permissions for ${teamName}`);
              for (const repo of repoAssets) {
                await setRepoPermissions(team.slug, repo, permissionLevel);
                
                // Also set for sub-team if it exists
                if (subTeam) {
                  await setRepoPermissions(subTeam.slug, repo, permissionLevel);
                }
              }
              
              return {
                teamId: team.id,
                teamSlug: team.slug,
                subTeamId: subTeam ? subTeam.id : null,
                subTeamSlug: subTeam ? subTeam.slug : null,
                parentTeamId: parentTeamId
              };
            } catch (error) {
              console.log(`Main execution error: ${error.message}`);
              core.setFailed(`Failed to process team request: ${error.message}`);
            }
      
      - name: Add comment to issue
        uses: actions/github-script@v6
        with:
          # Use the GitHub App token here as well
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const teamName = '${{ steps.parse.outputs.TEAM_NAME }}';
            const subTeamName = '${{ steps.parse.outputs.SUB_TEAM }}';
            const filename = '${{ steps.create-json.outputs.FILENAME }}';
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## Team Management Request Processed ✅
              
              Your team management request has been processed. Here's a summary:
              
              - Team **${teamName}** has been created or updated
              ${subTeamName ? `- Sub-team **${subTeamName}** has been created or updated` : ''}
              - Team data saved to \`teamDB/${filename}\`
              - Repository permissions have been set according to your request
              - Team is now a child of the **all-projects** team in the organization
              
              You can verify the teams and their members in the [KasdalOrg Teams page](https://github.com/orgs/KasdalOrg/teams).
              
              Thank you for using Team Management Ops!`
            });